# Next.js + FastAPI 풀스택 애플리케이션을 위한 극한 경량 Dockerfile
FROM node:18-alpine AS frontend-build

# 프론트엔드 빌드 (메모리 최소화)
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci --only=production --no-audit --no-fund --prefer-offline --silent
COPY frontend/ ./
RUN npm run build

# Python 백엔드 (가장 가벼운 베이스 이미지)
FROM python:3.11-alpine

# 시스템 패키지 최소 설치
RUN apk add --no-cache \
    gcc \
    musl-dev \
    nginx \
    supervisor \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/*

# Python 환경 최적화 (메모리 절약)
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PYTHONHASHSEED=random
ENV PYTHONOPTIMIZE=1
ENV PIP_TIMEOUT=300

# 백엔드 설정
WORKDIR /app

# requirements.txt 복사 및 극한 단계별 설치 (메모리 절약)
COPY backend/requirements.txt ./

# 1단계: 기본 도구만 설치
RUN pip install --no-cache-dir --upgrade pip

# 2단계: 핵심 FastAPI 패키지들 (가장 중요한 것부터)
RUN pip install --no-cache-dir fastapi==0.115.2

# 3단계: 웹 서버
RUN pip install --no-cache-dir uvicorn[standard]==0.32.0

# 4단계: 데이터 검증
RUN pip install --no-cache-dir pydantic==2.9.2 pydantic_core==2.23.4

# 5단계: 웹 프레임워크
RUN pip install --no-cache-dir starlette==0.40.0

# 6단계: 데이터베이스
RUN pip install --no-cache-dir SQLAlchemy==2.0.36

# 7단계: 마이그레이션
RUN pip install --no-cache-dir alembic==1.13.3

# 8단계: 인증
RUN pip install --no-cache-dir python-jose[cryptography]==3.3.0

# 9단계: 비밀번호 해싱
RUN pip install --no-cache-dir passlib[bcrypt]==1.7.4

# 10단계: 폼 처리
RUN pip install --no-cache-dir python-multipart

# 11단계: 환경변수
RUN pip install --no-cache-dir python-dotenv==1.0.1

# 12단계: 이메일 검증
RUN pip install --no-cache-dir email-validator==2.2.0

# 13단계: 타입 힌트
RUN pip install --no-cache-dir typing-extensions==4.12.2 annotated-types==0.7.0

# 14단계: 기타 필수 패키지들 (한 번에)
RUN pip install --no-cache-dir anyio==4.6.2.post1 certifi==2024.8.30 click==8.1.7 greenlet==3.1.1 h11==0.14.0 idna==3.10 packaging==24.1 pyasn1==0.6.1 rsa==4.9 six==1.16.0 sniffio==1.3.1

# 백엔드 코드 복사
COPY backend/ ./backend/
COPY db_manager.py ./

# 프론트엔드 정적 빌드 결과 복사
COPY --from=frontend-build /app/frontend/out ./frontend/out

# Nginx 설정 복사
COPY nginx.conf /etc/nginx/nginx.conf

# Supervisor 설정
RUN mkdir -p /var/log/supervisor
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# 포트 설정
EXPOSE 8080

# 메모리 사용량 극한 최적화
RUN find /usr/local/lib/python3.11 -name '*.pyc' -delete && \
    find /usr/local/lib/python3.11 -name '__pycache__' -delete && \
    find /usr/local/lib/python3.11 -name '*.pyo' -delete && \
    find /usr/local/lib/python3.11 -name '*.so' -exec strip {} \; 2>/dev/null || true

# Supervisor로 실행
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
